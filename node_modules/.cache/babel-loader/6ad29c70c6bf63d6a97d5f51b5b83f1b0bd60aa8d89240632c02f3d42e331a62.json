{"ast":null,"code":"import { auth, db } from \"./firebase\";\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, sendPasswordResetEmail, sendEmailVerification, updatePassword, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { doc, getDoc, setDoc } from \"firebase/firestore\";\n\n// export const doCreateUserWithEmailAndPassword = async (email, password) => {\n//   return createUserWithEmailAndPassword(auth, email, password);\n// };\n\nexport const doCreateUserWithEmailAndPassword = async (email, password, role) => {\n  try {\n    // Create user with email and password\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    // Save user role to Firestore\n    await setDoc(doc(db, \"users\", user.uid), {\n      email: user.email,\n      role: role,\n      createdAt: new Date()\n    });\n    return user;\n  } catch (error) {\n    console.error(\"Error creating user:\", error);\n    throw error;\n  }\n};\nexport const doSignInWithEmailAndPassword = (email, password) => {\n  return signInWithEmailAndPassword(auth, email, password);\n};\nexport const doSignInWithGoogle = async () => {\n  const provider = new GoogleAuthProvider();\n  try {\n    const result = await signInWithPopup(auth, provider);\n    const user = result.user;\n\n    // Check if user already exists in Firestore\n    const userDocRef = doc(db, \"users\", user.uid);\n    const userDoc = await getDoc(userDocRef);\n\n    // If user does not exist in Firestore, add them with default role\n    if (!userDoc.exists()) {\n      await setDoc(userDocRef, {\n        email: user.email,\n        role: \"Parent/Scout\",\n        // Default role\n        createdAt: new Date()\n      });\n    }\n  } catch (error) {\n    console.error(\"Error during Google Sign-In:\", error);\n    throw error;\n  }\n};\nexport const doSignOut = () => {\n  return auth.signOut();\n};\nexport const doPasswordReset = email => {\n  return sendPasswordResetEmail(auth, email);\n};\nexport const doPasswordChange = password => {\n  return updatePassword(auth.currentUser, password);\n};\nexport const doSendEmailVerification = () => {\n  return sendEmailVerification(auth.currentUser, {\n    url: `${window.location.origin}/home`\n  });\n};","map":{"version":3,"names":["auth","db","createUserWithEmailAndPassword","signInWithEmailAndPassword","sendPasswordResetEmail","sendEmailVerification","updatePassword","signInWithPopup","GoogleAuthProvider","doc","getDoc","setDoc","doCreateUserWithEmailAndPassword","email","password","role","userCredential","user","uid","createdAt","Date","error","console","doSignInWithEmailAndPassword","doSignInWithGoogle","provider","result","userDocRef","userDoc","exists","doSignOut","signOut","doPasswordReset","doPasswordChange","currentUser","doSendEmailVerification","url","window","location","origin"],"sources":["C:/Users/bensu/OneDrive/Documents/College Work/CSE/CSE4334/Project/Girl-Scout-Cookies-App/src/firebase/auth.js"],"sourcesContent":["import { auth, db } from \"./firebase\";\r\nimport {\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  sendPasswordResetEmail,\r\n  sendEmailVerification,\r\n  updatePassword,\r\n  signInWithPopup,\r\n  GoogleAuthProvider\r\n} from \"firebase/auth\";\r\nimport { doc, getDoc, setDoc } from \"firebase/firestore\";\r\n\r\n// export const doCreateUserWithEmailAndPassword = async (email, password) => {\r\n//   return createUserWithEmailAndPassword(auth, email, password);\r\n// };\r\n\r\nexport const doCreateUserWithEmailAndPassword = async (email, password, role) => {\r\n  try {\r\n    // Create user with email and password\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    const user = userCredential.user;\r\n\r\n    // Save user role to Firestore\r\n    await setDoc(doc(db, \"users\", user.uid), {\r\n      email: user.email,\r\n      role: role,\r\n      createdAt: new Date(),\r\n    });\r\n\r\n    return user;\r\n  } catch (error) {\r\n    console.error(\"Error creating user:\", error);\r\n    throw error; \r\n  }\r\n};\r\n\r\n\r\nexport const doSignInWithEmailAndPassword = (email, password) => {\r\n  return signInWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\nexport const doSignInWithGoogle = async () => {\r\n  const provider = new GoogleAuthProvider();\r\n  \r\n  try {\r\n    const result = await signInWithPopup(auth, provider);\r\n    const user = result.user;\r\n\r\n    // Check if user already exists in Firestore\r\n    const userDocRef = doc(db, \"users\", user.uid);\r\n    const userDoc = await getDoc(userDocRef);\r\n\r\n    // If user does not exist in Firestore, add them with default role\r\n    if (!userDoc.exists()) {\r\n      await setDoc(userDocRef, {\r\n        email: user.email,\r\n        role: \"Parent/Scout\", // Default role\r\n        createdAt: new Date(),\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error during Google Sign-In:\", error);\r\n    throw error; \r\n  }\r\n};\r\n\r\nexport const doSignOut = () => {\r\n  return auth.signOut();\r\n};\r\n\r\nexport const doPasswordReset = (email) => {\r\n  return sendPasswordResetEmail(auth, email);\r\n};\r\n\r\nexport const doPasswordChange = (password) => {\r\n  return updatePassword(auth.currentUser, password);\r\n};\r\n\r\nexport const doSendEmailVerification = () => {\r\n  return sendEmailVerification(auth.currentUser, {\r\n    url: `${window.location.origin}/home`,\r\n  });\r\n};\r\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,EAAE,QAAQ,YAAY;AACrC,SACEC,8BAA8B,EAC9BC,0BAA0B,EAC1BC,sBAAsB,EACtBC,qBAAqB,EACrBC,cAAc,EACdC,eAAe,EACfC,kBAAkB,QACb,eAAe;AACtB,SAASC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;;AAExD;AACA;AACA;;AAEA,OAAO,MAAMC,gCAAgC,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAAK;EAC/E,IAAI;IACF;IACA,MAAMC,cAAc,GAAG,MAAMd,8BAA8B,CAACF,IAAI,EAAEa,KAAK,EAAEC,QAAQ,CAAC;IAClF,MAAMG,IAAI,GAAGD,cAAc,CAACC,IAAI;;IAEhC;IACA,MAAMN,MAAM,CAACF,GAAG,CAACR,EAAE,EAAE,OAAO,EAAEgB,IAAI,CAACC,GAAG,CAAC,EAAE;MACvCL,KAAK,EAAEI,IAAI,CAACJ,KAAK;MACjBE,IAAI,EAAEA,IAAI;MACVI,SAAS,EAAE,IAAIC,IAAI,CAAC;IACtB,CAAC,CAAC;IAEF,OAAOH,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;AAGD,OAAO,MAAME,4BAA4B,GAAGA,CAACV,KAAK,EAAEC,QAAQ,KAAK;EAC/D,OAAOX,0BAA0B,CAACH,IAAI,EAAEa,KAAK,EAAEC,QAAQ,CAAC;AAC1D,CAAC;AAED,OAAO,MAAMU,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,MAAMC,QAAQ,GAAG,IAAIjB,kBAAkB,CAAC,CAAC;EAEzC,IAAI;IACF,MAAMkB,MAAM,GAAG,MAAMnB,eAAe,CAACP,IAAI,EAAEyB,QAAQ,CAAC;IACpD,MAAMR,IAAI,GAAGS,MAAM,CAACT,IAAI;;IAExB;IACA,MAAMU,UAAU,GAAGlB,GAAG,CAACR,EAAE,EAAE,OAAO,EAAEgB,IAAI,CAACC,GAAG,CAAC;IAC7C,MAAMU,OAAO,GAAG,MAAMlB,MAAM,CAACiB,UAAU,CAAC;;IAExC;IACA,IAAI,CAACC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MACrB,MAAMlB,MAAM,CAACgB,UAAU,EAAE;QACvBd,KAAK,EAAEI,IAAI,CAACJ,KAAK;QACjBE,IAAI,EAAE,cAAc;QAAE;QACtBI,SAAS,EAAE,IAAIC,IAAI,CAAC;MACtB,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMS,SAAS,GAAGA,CAAA,KAAM;EAC7B,OAAO9B,IAAI,CAAC+B,OAAO,CAAC,CAAC;AACvB,CAAC;AAED,OAAO,MAAMC,eAAe,GAAInB,KAAK,IAAK;EACxC,OAAOT,sBAAsB,CAACJ,IAAI,EAAEa,KAAK,CAAC;AAC5C,CAAC;AAED,OAAO,MAAMoB,gBAAgB,GAAInB,QAAQ,IAAK;EAC5C,OAAOR,cAAc,CAACN,IAAI,CAACkC,WAAW,EAAEpB,QAAQ,CAAC;AACnD,CAAC;AAED,OAAO,MAAMqB,uBAAuB,GAAGA,CAAA,KAAM;EAC3C,OAAO9B,qBAAqB,CAACL,IAAI,CAACkC,WAAW,EAAE;IAC7CE,GAAG,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;EAChC,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}